# This code is part of Tergite
#
# (C) Copyright Chalmers Next Labs 2024
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

include:
  - local: ".gitlab/functions/pipeline-functions.yml"

stages:
  - tests
  - application_run
  - post_merge_actions

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_VERSION: "3.10"
  REDIS_PORT: 6378
  HARDWARE_CONFIG: '$CI_PROJECT_DIR/data/devices/fc8a/240705_hardware_config_loke_a.json'
  DEVICE_CONFIG: '$CI_PROJECT_DIR/data/devices/fc8a/240705_device_config.toml'
  CLUSTER_IP: '192.0.2.141'
  CLUSTER_NAME: 'clusterA'
  SPI_SERIAL_PORT: '/dev/ttyACM0'

tests:
  stage: tests
  image: python:${PYTHON_VERSION}
  script:
    # Install redis
    - apt-get update
    - apt-get install redis ffmpeg libsm6 libxext6  -y
    # Run the redis server
    - redis-server --daemonize yes --port "$REDIS_PORT"

    # Install project dependencies
    - pip install .
    - pip install pytest black==24.10.0 requests-mock==1.11.0 pylint

    # Check formatting
    - black --check tergite_autocalibration
    # Run unit tests
    - pytest tergite_autocalibration
    - pylint tergite_autocalibration --fail-under=6.0
  cache:
    paths:
      - .cache/pip

application_run:
  stage: application_run
  image: python:${PYTHON_VERSION}
  script:
    # Install Redis
    - apt-get update
    - apt-get install redis ffmpeg libsm6 libxext6 -y
    # Start the Redis server
    - redis-server --daemonize yes --port "$REDIS_PORT"

    # Install project dependencies
    - pip install .
    
    # Debug: List files to confirm paths
    - echo "Listing data files:"
    - ls -R "$CI_PROJECT_DIR/data"

    # Reset redis
    - echo "y" | acli node reset -a

    # Dynamically create a custom user_inputs.py file in the pipeline
    - |
      cat <<EOL > user_input.py
      target_node = "randomized_benchmarking_ssro"
      qubits = ["q14", "q15",]
      couplers = ["q14_q15"]
      EOL
    - cp user_input.py $CI_PROJECT_DIR/utils

    # Run the main application command
    - |
      acli calibration start -r "$CI_PROJECT_DIR/datasets/fc8_unit_tests_6-15" -n randomized_benchmarking_ssro

    # Verify output
    - |
      OUTPUT_FILE="$CI_PROJECT_DIR/datasets/fc8_unit_tests_6-15/randomized_benchmarking_ssro.png"
      if [ -f "$OUTPUT_FILE" ]; then
        echo "Output file $OUTPUT_FILE exists. Application ran successfully."
      else
        echo "Error: Output file $OUTPUT_FILE not found."
        exit 1
      fi

  cache:
    paths:
      - .cache/pip


post_merge_actions:
  stage: post_merge_actions
  image: ubuntu:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    # Run a wiki update
    - !reference [.update_wiki, script]
