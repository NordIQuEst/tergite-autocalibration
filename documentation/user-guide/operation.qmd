# Operation

The package ships with a command line interface to solve some common tasks that appear quite often.

In the following there are a number of useful commands, but if you want to find out all commands use:
```acli --help```

To delete all redis entries:
```acli node reset -a```

To reset a particular node:
```acli node reset -n <nodename>```

For example to reset the node `rabi_oscillations` run the command:

```acli node reset -n rabi_oscillations```

**To start a new calibration sequence according to the configuration files:**

**```python tergite_acl/scripts/calibration_supervisor.py```**

or

**```acli calibration start```**

## CLI ##

This document provides an overview of the Command Line Interface (CLI) options and their functionalities.

### Main Commands ###

The autocalibration CLI is organized into several main command groups:

- `cluster`: Handle operations related to the cluster
- `node`: Handle operations related to the node
- `graph`: Handle operations related to the calibration graph
- `calibration`: Handle operations related to the calibration supervisor
- `joke`: Handle operations related to the well-being of the user

### Cluster Commands ###

#### `cluster reboot` ####

Reboots the cluster.

**Usage:**
```
acli cluster reboot
```

This command will prompt for confirmation before rebooting the cluster, as it can interrupt ongoing measurements.

### Node Commands ###

#### `node reset` ####

Resets all parameters in Redis for the specified node(s).

**Usage:**
```
acli node reset [OPTIONS]
```

**Options:**

- `-n, --name TEXT`: Name of the node to be reset in Redis (e.g., resonator_spectroscopy)
- `-a, --all`: Reset all nodes
- `-f, --from_node TEXT`: Reset all nodes from the specified node in the chain

### Graph Commands ###

#### `graph plot` ####

Plots the calibration graph to the user-specified target node in topological order.

**Usage:**
```
acli graph plot
```

This command visualizes the calibration graph using an arrow chart.

### Calibration Commands ###

#### `calibration start` ####

Starts the calibration supervisor.

**Usage:**
```
acli calibration start [OPTIONS]
```

**Options:**

- `-c TEXT`: Cluster IP address (if not set, it will use CLUSTER_IP from the .env file)
- `-r TEXT`: Rerun an analysis (specify the path to the dataset folder)
- `-n, --name TEXT`: Specify the node type to rerun (works only with -r option)
- `--push`: Push a backend to an MSS specified in MSS_MACHINE_ROOT_URL in the .env file
- `--browser`: Will open the dataset browser in the background and plot the measurement results live

### Dataset browser ###

#### `browser` ####

Starts the dataset browser.

**Usage:**
```
acli browser --datadir [OPTIONS]
```

**Options:**

- `--datadir PATH`: Folder to take the plot data from
- `--liveplotting`: Whether plots should be updated in real time (default: False)
- `--log-level INT`: Log-level as in the Python `logging` package to be used in the logs (default: 30)

### Joke Command ###

#### `joke` ####

Prints a random joke to lighten the mood.

**Usage:**
```
acli joke
```

This command fetches and displays a random joke, excluding potentially offensive content.

### Notes ###

- The CLI uses the Click library for command-line interface creation.
- Some commands may require additional configuration or environment variables to be set.
- When using the `-r` option for rerunning analysis, make sure to also specify the node name using `-n`.

For more detailed information about each command, use the `--help` option with any command or subcommand.


## Structure ##
For each calibration node:
compilation -> execution -> post-processing -> redis updating

## Data browsing ##
Datasets are stored in `data_directory`
Can be browsed with the dataset browser (coming soon)

## Development ##
When submitting  contributions, please prepend your commit messages with:
`fix:` for bug fixes
`feat:` for introducing a new feature (e.g. a new measurement node or a new analysis class)
`chore:` for refactoring changes or any change that doesn't affect the functionality of the code
`docs:` for changes in the README, docstrings etc
`test:` or `dev:` for testing or development changes (e.g. profiling scripts)
