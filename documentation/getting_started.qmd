# Getting started

## Installation
This project contains an orchistration manager, a collection of callibration schedules and a collection of post-processing & analysis routines.
It is tailored for the tune-up of the 25 qubits QPU at Chalmers, QTL.
This repository utilizes **`redis`** for on memory data storage.
As redis operates only on Linux systems, this repo can only work

* either on Linux distributions

* or WSL (Windows Subsystem for Linux) environments, installed on a Windows system.

To install WSL, it is required **Windows 10** of version at least **1903**.

## Repository installation: ##
#### After setting up your ssh key, clone the repo:  ####
```git clone git@github.com:chalmersnextlabs-quantum/tergite-autocalibration.git```

#### Install Redis: ####
```https://redis.io/docs/getting-started/installation/install-redis-on-linux/```

#### After installing redis, start the service, type from terminal: ####
```redis-server```

#### Create your local environment.   ####
If for example you want to name your environment `tac`, you create it as

```conda create --name tac python=3.9```

#### Activate your local environment.   ####
```conda activate tac```

#### If you are not using conda, activate the environment with:   ####
```source activate tac```

#### Enter the project root directory:  ####
```cd tergite-autocalibration-lite/```

**From now on, it is assumed that all commands are executed from the project root directory.**

#### Install the repository in editable mode so all your changes are applied whithout the need of reinstall ####

```pip install -e .```

Here `.` is the root directory (i.e. the directory that contains the `pyproject.toml` file)

## Setting Up system & Configuration Files:
Before the first run of the callibration suite a number of configuration files need to be set up.
These files describe our initial knowledge on the system as well as the connectivity with the measurement hardware.

### The `.env` file.

All the settings and paths are contained in the `.env` file. Since this file contains user specific settings, it is git-ignored, it must be created by the user. For convinience a template file `dot-env-template.txt` already exists.

First copy the template file to the `.env` (this creates the `.env` file if it doesn't exist):

```cp dot-env-template .env```

Then edit the newly created `.env` file according to your system. For example here's how the user
`lab-user` may complete the `.env` file:


```python
# Copy this file to a .env file in the tergite-autocalibration folder on the root level.
# The .env file is a simple list of keys and values. It is also known as the INI file on MS Windows.
# Fill in the necessary values.

# DEFAULT_PREFIX is added to logfiles, redis entries and in the data directory
# Default: cal
DEFAULT_PREFIX=calibration

# Directory settings
# ROOT_DIR defines the top-level folder of the tergite-autocalibration-lite folder
# Default: two levels up from the config
ROOT_DIR='/home/lab-user/github/tergite-acl/'

# DATA_DIR defines where plots are stored
DATA_DIR='/home/lab-user/github/tergite-acl/data_directory/'

# CONFIG_DIR defines where the configuration is stored
CONFIG_DIR='/home/lab-user/github/tergite-acl/config_dir/'


# Configuration settings
# It is assumed that all these paths are relative to CONFIG_DIR
# CLUSTER_CONFIG is what Q-BLOX needs to compile schedules on the hardware
# It should be a file in json format, there is no default file
CLUSTER_CONFIG='CLUSTER_CONFIGURATION.json'

# DEVICE_CONFIG contains the initial values for the device configuration
DEVICE_CONFIG='device_config.toml'

# Configuration variables
# CLUSTER_IP is the IP address of the instrument cluster to connect with
CLUSTER_IP='162.0.2.162'
# SPI_SERIAL_PORT is the port on which the spi rack is connected
SPI_SERIAL_PORT='/dev/ttyACM0'

# APP_SETTINGS reflect which environment the calibration is to run in.
# Options
#  - development
#  - production
#  - staging
#  - test
# Default: production
# TODO: currently we are only using the calibration in the development mode
RUN_MODE=development

# REDIS_PORT is the port which to use when connecting to redis
REDIS_PORT=6379
# REDIS_CONNECTION will be automatically created in settings.py

# PLOTTING is a boolean to indicate whether plots should be shown or whether plots should be silent in the background
# Default: True
PLOTTING=True
```
