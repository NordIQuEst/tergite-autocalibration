# Copy this file to a .env file in the tergite-autocalibration folder on the root level.
# The .env file is a simple list of keys and values. It is also known as the INI file on MS Windows.
# Fill in the necessary values. Note that all values in this template are example values.

# DEFAULT_PREFIX is added to logfiles, redis entries and in the data directory.
# It does not matter which value you are giving it, but typically it might be your username.
# Default: cal
DEFAULT_PREFIX='calibration'

# Directory settings
# ROOT_DIR defines the top-level folder of the tergite-autocalibration folder.
# This is in most cases the path to the folder to which you cloned the repository.
# Default: two levels up from the config
ROOT_DIR='/home/user/repos/tergite-autocalibration'

# DATA_DIR defines where plots are stored.
# If you do not put an existing path, the program will try to create it automatically.
# Default: create a directory called 'out' on root level
DATA_DIR='/home/user/repos/tergite-autocalibration/out'

# CONFIG_DIR defines where the configuration is stored
# Default: search for a directory called 'configs' on root level
CONFIG_DIR='/home/user/repos/tergite-autocalibration/configs'


# Configuration settings
# It is assumed that all these paths are relative to CONFIG_DIR.

# RUN_CONFIGURATION is all information related to the current run of the autocalibration
# This is e.g. the target node, qubits and couplers
RUN_CONFIG='run_config.toml'

# CLUSTER_CONFIG is what Q-BLOX needs to compile schedules on the hardware.
# In the QBLOX documentation this might refer to hardware configuration.
# It should be a file in json format, there is no default file
CLUSTER_CONFIG='cluster_config.json'
# DEVICE_CONFIG contains the initial values for the device configuration.
DEVICE_CONFIG='device_config.toml'
# SPI_CONFIG is the file to configure the wiring on the Q-BLOX Spi Rack.
# This is only necessary if you are running two-qubit calibrations.
# If you just want to run single-qubit calibrations, you can go without an SPI configuration.
SPI_CONFIG='spi_config.toml'

# NODE_CONFIG contains all values for the runtime of the program.
NODE_CONFIG='node_config.toml'
# USER_SAMPLESPACE gives the possibility to define custom samplespaces.
USER_SAMPLESPACE='user_samplespace.py'

# Configuration variables
# CLUSTER_IP is the IP address of the instrument cluster to connect with
CLUSTER_IP='192.14.2.1'
# Usually the cluster name is written in the cluster configuration file.
CLUSTER_NAME='clusterA'
# SPI_SERIAL_PORT is the port on which the spi rack is connected.
SPI_SERIAL_PORT='/dev/ttyACM0'

# APP_SETTINGS reflect which environment the calibration is to run in.
# Options
#  - development
#  - production
#  - staging
#  - test
# Default: production
RUN_MODE=development

# REDIS_PORT is the port which to use when connecting to redis.
# You can start a redis instance with your custom port using:
# $> redis-server --port REDIS_PORT
# Replace REDIS_PORT with your custom port number e.g. 6380
REDIS_PORT=6379
# A variable REDIS_CONNECTION will be automatically created in settings.py

# PLOTTING is a boolean to indicate whether plots should be shown or whether plots should be silent in the background.
# Default: True
PLOTTING=True


# -------------------------------------------------------------------------------------------------------
# The following section is only to be configured if you run the calibration as part of the software stack
# -------------------------------------------------------------------------------------------------------

# Connectivity settings
# MSS_MACHINE_ROOT_URL defines the URL to which the backend definition should be pushed after calibration
# Change this variable only if you are sure what you are doing
MSS_MACHINE_ROOT_URL=http://0.0.0.0:8002